#Find top 3 orders/purchased customers for each day
#We need to join order and order_items 
#And then using a function to return the top 3 customers list for each day

####################### Using python #############################################
ordersRDD = sc.textFile("/home/cloudera/orders.txt")
orderItemsRDD = sc.textFile("/home/cloudera/order_items.txt")

ordersMap = ordersRDD.map(lambda x: (int(x.split(",")[0]), x))
orderItemsMap = orderItemsRDD.map(lambda x: (int(x.split(",")[1]), x))

#Joining orders with orderItems
ordersJoinedMap = ordersMap.join(orderItemsMap)

#Creating tuple object having Date as key and order value and customer id as value tuple
ordersCustomerMap = ordersJoinedMap.map(lambda x: (x[1][0].split(",")[1], (float(x[1][1].split(",")[4]), int(x[1][0].split(",")[2]))))

#Defining a function that will return TopN items from the given collection
#This function takes Tuple object as input which is having OrderItem sub-total & Order Customer Id
#To find TopN purchased customers, we need to sort the total sales for each item by descending order
#Total sales for each order can be found in OrderItems (4th element)
def getTopItems(x, topNItems): 
	retList = []
	retList = list(sorted(x, key = lambda k: k[0], reverse=True))
	return list(retList[0:topNItems])

#ordersCustomerMap.groupByKey().map(lambda x: (x[0], list(sorted(x[1], key=lambda k: k[0], reverse=True)))).take(1)

for i in ordersCustomerMap.groupByKey().map(lambda x: (x[0], getTopItems(x[1], 3))).collect(): print(i)
#for i in ordersCustomerMap.groupByKey().map(lambda x: (x[0], getTopItems(x, 3))).sortByKey().collect(): print(i)