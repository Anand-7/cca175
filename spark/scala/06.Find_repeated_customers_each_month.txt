#Find repeated customers for each month
#A customer exists in each month is treated as repeated customer

####################### Using scala #############################################
val ordersRDD = sc.textFile("/home/cloudera/orders.txt")
val orderItemsRDD = sc.textFile("/home/cloudera/order_items.txt")

#create tuple object with order_id and year and month from order_date
val ordersMap = ordersRDD.map(x => x.split(",")).map(x => (x(0).toInt, (x(1).substring(0, 7), x(2).toInt)))

val orderItemsMap = orderItemsRDD.map(x => x.split(",")).map(x => (x(1).toInt, x(4).toFloat))

val ordersJoin = ordersMap.join(orderItemsMap)

val orderCustomersMap = ordersJoin.map(x => (x._2._1._1, x._2._1._2)).distinct

val totalOrderMonths = orderCustomersMap.map(x => x._1).distinct.count

val customersMap = orderCustomersMap.map(x => (x._2, 1)).countByKey

val repeatedCustomers = customersMap.filter(x => x._2 == totalOrderMonths)

println("Total repeated customers: " + repeatedCustomers.size)

#To get customers first & last name
val repeatedCustomersMap = orderCustomersMap.map(x => (x._2, 1)).reduceByKey(_ + _).filter(x => x._2 == totalOrderMonths)

val customersRDD = sc.textFile("/home/cloudera/customers.txt")

val customersMap = customersRDD.map(x => x.split(",")).map(x => (x(0).toInt, (x(1), x(2))))

val repeatedCustomersJoin = customersMap.join(repeatedCustomersMap)

val repeatedCustomersDetails = repeatedCustomersJoin.map(x => x._2._1._1 + " " + x._2._1._2)

repeatedCustomersDetails.collect.foreach(println)
